type Order {
  _id: ID!
  user: User!
  total: Float!
  status: OrderStatus!
  items: [OrderItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderStatus {
  WAITING_PAYMENT
  IN_QUEUE
  PREPARING
  READY
  ON_THE_WAY
  DELIVERED
}

input OrderCreateInput {
  status: OrderStatus
  user: ID
  items: [OrderItemCreateInput!]
}

input OrderUpdateInput {
  status: OrderStatus
  user: ID
  itemsToAdd: [OrderItemCreateInput!]
  itemsToUpdate: [OrderItemUpdateInput!]
  itemsToDelete: [ID!]
}

enum OrderOrderByInput {
  total_ASC
  total_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  orders(skip: Int, limit: Int, orderBy: [OrderOrderByInput!]): [Order!]! @auth
  order(_id: ID!): Order! @auth
}

type Mutation {
  createOrder(data: OrderCreateInput): Order! @auth
  updateOrder(_id: ID!, data: OrderUpdateInput!): Order! @auth
  deleteOrder(_id: ID!): Order! @auth
}
