type Order {
  _id: ID!
  user: User!
  total: Float!
  status: OrderStatus!
  items: [OrderItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrderStatus {
  WAITING_PAYMENT
  IN_QUEUE
  PREPARING
  READY
  ON_THE_WAY
  DELIVERED
}

input OrderCreateInput {
  status: OrderStatus
  user: ID
  items: [OrderItemCreateInput!]
}

input OrderUpdateInput {
  status: OrderStatus
  user: ID
  itemsToAdd: [OrderItemCreateInput!]
  itemsToUpdate: [OrderItemUpdateInput!]
  itemsToDelete: [ID!]
}

enum OrderOrderByInput {
  total_ASC
  total_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderWhereInput {
  totalEq: Float
  totalNe: Float
  totalIn: [Float!]
  totalNin: [Float!]
  totalLt: Float
  totalLte: Float
  totalGt: Float
  totalGte: Float
  statusEq: OrderStatus
  statusNe: OrderStatus
  statusIn: [OrderStatus!]
  statusNin: [OrderStatus!]
  createdAtEq: DateTime
  createdAtNe: DateTime
  createdAtIn: [DateTime!]
  createdAtNin: [DateTime!]
  createdAtLt: DateTime
  createdAtLte: DateTime
  createdAtGt: DateTime
  createdAtGte: DateTime
  updatedAtEq: DateTime
  updatedAtNe: DateTime
  updatedAtIn: [DateTime!]
  updatedAtNin: [DateTime!]
  updatedAtLt: DateTime
  updatedAtLte: DateTime
  updatedAtGt: DateTime
  updatedAtGte: DateTime
  userEq: ID
  userNe: ID
  userIn: [ID!]
  userNin: [ID!]
  AND: [OrderWhereInput]
  OR: [OrderWhereInput]
  NOR: [OrderWhereInput]
}

type Query {
  orders(
    skip: Int
    limit: Int
    orderBy: [OrderOrderByInput!]
    where: OrderWhereInput
  ): [Order!]! @auth
  order(_id: ID!): Order! @auth
}

type Mutation {
  createOrder(data: OrderCreateInput): Order! @auth
  updateOrder(_id: ID!, data: OrderUpdateInput!): Order! @auth
  deleteOrder(_id: ID!): Order! @auth
}
